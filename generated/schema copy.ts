// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Datauser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Datauser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Datauser must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Datauser", id.toString(), this);
    }
  }

  static load(id: string): Datauser | null {
    return changetype<Datauser | null>(store.get("Datauser", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user_id(): string {
    let value = this.get("user_id");
    return value!.toString();
  }

  set user_id(value: string) {
    this.set("user_id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get last_name(): string {
    let value = this.get("last_name");
    return value!.toString();
  }

  set last_name(value: string) {
    this.set("last_name", Value.fromString(value));
  }

  get phone(): string {
    let value = this.get("phone");
    return value!.toString();
  }

  set phone(value: string) {
    this.set("phone", Value.fromString(value));
  }

  get email(): string {
    let value = this.get("email");
    return value!.toString();
  }

  set email(value: string) {
    this.set("email", Value.fromString(value));
  }

  get country(): string {
    let value = this.get("country");
    return value!.toString();
  }

  set country(value: string) {
    this.set("country", Value.fromString(value));
  }

  get mediator(): boolean {
    let value = this.get("mediator");
    return value!.toBoolean();
  }

  set mediator(value: boolean) {
    this.set("mediator", Value.fromBoolean(value));
  }

  get is_active(): boolean {
    let value = this.get("is_active");
    return value!.toBoolean();
  }

  set is_active(value: boolean) {
    this.set("is_active", Value.fromBoolean(value));
  }

  get badge(): string {
    let value = this.get("badge");
    return value!.toString();
  }

  set badge(value: string) {
    this.set("badge", Value.fromString(value));
  }

  get is_merchant(): boolean {
    let value = this.get("is_merchant");
    return value!.toBoolean();
  }

  set is_merchant(value: boolean) {
    this.set("is_merchant", Value.fromBoolean(value));
  }

  get campo1(): string {
    let value = this.get("campo1");
    return value!.toString();
  }

  set campo1(value: string) {
    this.set("campo1", Value.fromString(value));
  }

  get campo2(): string {
    let value = this.get("campo2");
    return value!.toString();
  }

  set campo2(value: string) {
    this.set("campo2", Value.fromString(value));
  }

  get campo3(): string {
    let value = this.get("campo3");
    return value!.toString();
  }

  set campo3(value: string) {
    this.set("campo3", Value.fromString(value));
  }

  get total_orders(): i32 {
    let value = this.get("total_orders");
    return value!.toI32();
  }

  set total_orders(value: i32) {
    this.set("total_orders", Value.fromI32(value));
  }

  get orders_completed(): i32 {
    let value = this.get("orders_completed");
    return value!.toI32();
  }

  set orders_completed(value: i32) {
    this.set("orders_completed", Value.fromI32(value));
  }

  get percentaje_completion(): string {
    let value = this.get("percentaje_completion");
    return value!.toString();
  }

  set percentaje_completion(value: string) {
    this.set("percentaje_completion", Value.fromString(value));
  }
}

export class Paymentmethod extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Paymentmethod entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Paymentmethod must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Paymentmethod", id.toString(), this);
    }
  }

  static load(id: string): Paymentmethod | null {
    return changetype<Paymentmethod | null>(store.get("Paymentmethod", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get paymentmethoduser(): Array<string> {
    let value = this.get("paymentmethoduser");
    return value!.toStringArray();
  }

  set paymentmethoduser(value: Array<string>) {
    this.set("paymentmethoduser", Value.fromStringArray(value));
  }

  get payment_method(): string {
    let value = this.get("payment_method");
    return value!.toString();
  }

  set payment_method(value: string) {
    this.set("payment_method", Value.fromString(value));
  }

  get input1(): string {
    let value = this.get("input1");
    return value!.toString();
  }

  set input1(value: string) {
    this.set("input1", Value.fromString(value));
  }

  get input2(): string {
    let value = this.get("input2");
    return value!.toString();
  }

  set input2(value: string) {
    this.set("input2", Value.fromString(value));
  }

  get input3(): string {
    let value = this.get("input3");
    return value!.toString();
  }

  set input3(value: string) {
    this.set("input3", Value.fromString(value));
  }

  get input4(): string {
    let value = this.get("input4");
    return value!.toString();
  }

  set input4(value: string) {
    this.set("input4", Value.fromString(value));
  }

  get input5(): string {
    let value = this.get("input5");
    return value!.toString();
  }

  set input5(value: string) {
    this.set("input5", Value.fromString(value));
  }
}

export class Fiatmethod extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Fiatmethod entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Fiatmethod must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Fiatmethod", id.toString(), this);
    }
  }

  delete(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Paymentmethod entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Paymentmethod must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.remove("Fiatmethod", id.toString());
    }
  }

  static load(id: string): Fiatmethod | null {
    return changetype<Fiatmethod | null>(store.get("Fiatmethod", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fiat_method(): string {
    let value = this.get("fiat_method");
    return value!.toString();
  }

  set fiat_method(value: string) {
    this.set("fiat_method", Value.fromString(value));
  }

  get flagcdn(): string {
    let value = this.get("flagcdn");
    return value!.toString();
  }

  set flagcdn(value: string) {
    this.set("flagcdn", Value.fromString(value));
  }
}


export class Paymentmethoduser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Paymentmethoduser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Paymentmethoduser must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Paymentmethoduser", id.toString(), this);
    }
  }

  delete(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Paymentmethoduser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Paymentmethoduser must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.remove("Paymentmethoduser", id.toString());
    }
  }

  static load(id: string): Paymentmethoduser | null {
    return changetype<Paymentmethoduser | null>(
      store.get("Paymentmethoduser", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user_id(): string {
    let value = this.get("user_id");
    return value!.toString();
  }

  set user_id(value: string) {
    this.set("user_id", Value.fromString(value));
  }

  get payment_method(): string {
    let value = this.get("payment_method");
    return value!.toString();
  }

  set payment_method(value: string) {
    this.set("payment_method", Value.fromString(value));
  }

  get input1(): string {
    let value = this.get("input1");
    return value!.toString();
  }

  set input1(value: string) {
    this.set("input1", Value.fromString(value));
  }

  get input2(): string {
    let value = this.get("input2");
    return value!.toString();
  }

  set input2(value: string) {
    this.set("input2", Value.fromString(value));
  }

  get input3(): string {
    let value = this.get("input3");
    return value!.toString();
  }

  set input3(value: string) {
    this.set("input3", Value.fromString(value));
  }

  get input4(): string {
    let value = this.get("input4");
    return value!.toString();
  }

  set input4(value: string) {
    this.set("input4", Value.fromString(value));
  }

  get input5(): string {
    let value = this.get("input5");
    return value!.toString();
  }

  set input5(value: string) {
    this.set("input5", Value.fromString(value));
  }
}

export class Offersbuy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Offersbuy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Offersbuy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Offersbuy", id.toString(), this);
    }
  }

  delete(): void {
    let id = this.get("id");
    assert(id != null, "Cannot delete Offersbuy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Offersbuy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.remove("Offersbuy", id.toString());
    }
  }

  static load(id: string): Offersbuy | null {
    return changetype<Offersbuy | null>(store.get("Offersbuy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offer_id(): BigInt {
    let value = this.get("offer_id");
    return value!.toBigInt();
  }

  set offer_id(value: BigInt) {
    this.set("offer_id", Value.fromBigInt(value));
  }

  get owner_id(): string {
    let value = this.get("owner_id");
    return value!.toString();
  }

  set owner_id(value: string) {
    this.set("owner_id", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get exchange_rate(): string {
    let value = this.get("exchange_rate");
    return value!.toString();
  }

  set exchange_rate(value: string) {
    this.set("exchange_rate", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get remaining_amount(): BigInt {
    let value = this.get("remaining_amount");
    return value!.toBigInt();
  }

  set remaining_amount(value: BigInt) {
    this.set("remaining_amount", Value.fromBigInt(value));
  }

  get min_limit(): BigInt {
    let value = this.get("min_limit");
    return value!.toBigInt();
  }

  set min_limit(value: BigInt) {
    this.set("min_limit", Value.fromBigInt(value));
  }

  get max_limit(): BigInt {
    let value = this.get("max_limit");
    return value!.toBigInt();
  }

  set max_limit(value: BigInt) {
    this.set("max_limit", Value.fromBigInt(value));
  }

  get payment_method(): string {
    let value = this.get("payment_method");
    return value!.toString();
  }

  set payment_method(value: string) {
    this.set("payment_method", Value.fromString(value));
  }

  get fiat_method(): BigInt {
    let value = this.get("fiat_method");
    return value!.toBigInt();
  }

  set fiat_method(value: BigInt) {
    this.set("fiat_method", Value.fromBigInt(value));
  }

  get is_merchant(): boolean {
    let value = this.get("is_merchant");
    return value!.toBoolean();
  }

  set is_merchant(value: boolean) {
    this.set("is_merchant", Value.fromBoolean(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get terms_conditions(): string {
    let value = this.get("terms_conditions");
    return value!.toString();
  }

  set terms_conditions(value: string) {
    this.set("terms_conditions", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }
}

export class Offerssell extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Offerssell entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Offerssell must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Offerssell", id.toString(), this);
    }
  }

  delete(): void {
    let id = this.get("id");
    assert(id != null, "Cannot delete Offerssell entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Offerssell must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.remove("Offerssell", id.toString());
    }
  }

  static load(id: string): Offerssell | null {
    return changetype<Offerssell | null>(store.get("Offerssell", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offer_id(): BigInt {
    let value = this.get("offer_id");
    return value!.toBigInt();
  }

  set offer_id(value: BigInt) {
    this.set("offer_id", Value.fromBigInt(value));
  }

  get owner_id(): string {
    let value = this.get("owner_id");
    return value!.toString();
  }

  set owner_id(value: string) {
    this.set("owner_id", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get exchange_rate(): string {
    let value = this.get("exchange_rate");
    return value!.toString();
  }

  set exchange_rate(value: string) {
    this.set("exchange_rate", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get remaining_amount(): BigInt {
    let value = this.get("remaining_amount");
    return value!.toBigInt();
  }

  set remaining_amount(value: BigInt) {
    this.set("remaining_amount", Value.fromBigInt(value));
  }

  get min_limit(): BigInt {
    let value = this.get("min_limit");
    return value!.toBigInt();
  }

  set min_limit(value: BigInt) {
    this.set("min_limit", Value.fromBigInt(value));
  }

  get max_limit(): BigInt {
    let value = this.get("max_limit");
    return value!.toBigInt();
  }

  set max_limit(value: BigInt) {
    this.set("max_limit", Value.fromBigInt(value));
  }

  get payment_method(): string {
    let value = this.get("payment_method");
    return value!.toString();
  }

  set payment_method(value: string) {
    this.set("payment_method", Value.fromString(value));
  }

  get fiat_method(): BigInt {
    let value = this.get("fiat_method");
    return value!.toBigInt();
  }

  set fiat_method(value: BigInt) {
    this.set("fiat_method", Value.fromBigInt(value));
  }

  get is_merchant(): boolean {
    let value = this.get("is_merchant");
    return value!.toBoolean();
  }

  set is_merchant(value: boolean) {
    this.set("is_merchant", Value.fromBoolean(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get terms_conditions(): string {
    let value = this.get("terms_conditions");
    return value!.toString();
  }

  set terms_conditions(value: string) {
    this.set("terms_conditions", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }
}

export class Orderbuy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Orderbuy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Orderbuy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Orderbuy", id.toString(), this);
    }
  }

  delete(): void {
    let id = this.get("id");
    assert(id != null, "Cannot delete Orderbuy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Orderbuy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.remove("Orderbuy", id.toString());
    }
  }

  static load(id: string): Orderbuy | null {
    return changetype<Orderbuy | null>(store.get("Orderbuy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offer_id(): BigInt {
    let value = this.get("offer_id");
    return value!.toBigInt();
  }

  set offer_id(value: BigInt) {
    this.set("offer_id", Value.fromBigInt(value));
  }

  get order_id(): BigInt {
    let value = this.get("order_id");
    return value!.toBigInt();
  }

  set order_id(value: BigInt) {
    this.set("order_id", Value.fromBigInt(value));
  }

  get owner_id(): string {
    let value = this.get("owner_id");
    return value!.toString();
  }

  set owner_id(value: string) {
    this.set("owner_id", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get signer_id(): string {
    let value = this.get("signer_id");
    return value!.toString();
  }

  set signer_id(value: string) {
    this.set("signer_id", Value.fromString(value));
  }

  get exchange_rate(): string {
    let value = this.get("exchange_rate");
    return value!.toString();
  }

  set exchange_rate(value: string) {
    this.set("exchange_rate", Value.fromString(value));
  }

  get operation_amount(): BigInt {
    let value = this.get("operation_amount");
    return value!.toBigInt();
  }

  set operation_amount(value: BigInt) {
    this.set("operation_amount", Value.fromBigInt(value));
  }

  get amount_delivered(): BigInt {
    let value = this.get("amount_delivered");
    return value!.toBigInt();
  }

  set amount_delivered(value: BigInt) {
    this.set("amount_delivered", Value.fromBigInt(value));
  }

  get fee_deducted(): BigInt {
    let value = this.get("fee_deducted");
    return value!.toBigInt();
  }

  set fee_deducted(value: BigInt) {
    this.set("fee_deducted", Value.fromBigInt(value));
  }

  get payment_method(): BigInt {
    let value = this.get("payment_method");
    return value!.toBigInt();
  }

  set payment_method(value: BigInt) {
    this.set("payment_method", Value.fromBigInt(value));
  }

  get fiat_method(): BigInt {
    let value = this.get("fiat_method");
    return value!.toBigInt();
  }

  set fiat_method(value: BigInt) {
    this.set("fiat_method", Value.fromBigInt(value));
  }

  get confirmation_owner_id(): i32 {
    let value = this.get("confirmation_owner_id");
    return value!.toI32();
  }

  set confirmation_owner_id(value: i32) {
    this.set("confirmation_owner_id", Value.fromI32(value));
  }

  get confirmation_signer_id(): i32 {
    let value = this.get("confirmation_signer_id");
    return value!.toI32();
  }

  set confirmation_signer_id(value: i32) {
    this.set("confirmation_signer_id", Value.fromI32(value));
  }

  get confirmation_current(): i32 {
    let value = this.get("confirmation_current");
    return value!.toI32();
  }

  set confirmation_current(value: i32) {
    this.set("confirmation_current", Value.fromI32(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get datetime(): string {
    let value = this.get("datetime");
    return value!.toString();
  }

  set datetime(value: string) {
    this.set("datetime", Value.fromString(value));
  }

  get terms_conditions(): string {
    let value = this.get("terms_conditions");
    return value!.toString();
  }

  set terms_conditions(value: string) {
    this.set("terms_conditions", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }
}

export class Ordersell extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ordersell entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Ordersell must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Ordersell", id.toString(), this);
    }
  }

  delete(): void {
    let id = this.get("id");
    assert(id != null, "Cannot delete Ordersell entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Ordersell must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.remove("Ordersell", id.toString());
    }
  }

  static load(id: string): Ordersell | null {
    return changetype<Ordersell | null>(store.get("Ordersell", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offer_id(): BigInt {
    let value = this.get("offer_id");
    return value!.toBigInt();
  }

  set offer_id(value: BigInt) {
    this.set("offer_id", Value.fromBigInt(value));
  }

  get order_id(): BigInt {
    let value = this.get("order_id");
    return value!.toBigInt();
  }

  set order_id(value: BigInt) {
    this.set("order_id", Value.fromBigInt(value));
  }

  get owner_id(): string {
    let value = this.get("owner_id");
    return value!.toString();
  }

  set owner_id(value: string) {
    this.set("owner_id", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get signer_id(): string {
    let value = this.get("signer_id");
    return value!.toString();
  }

  set signer_id(value: string) {
    this.set("signer_id", Value.fromString(value));
  }

  get exchange_rate(): string {
    let value = this.get("exchange_rate");
    return value!.toString();
  }

  set exchange_rate(value: string) {
    this.set("exchange_rate", Value.fromString(value));
  }

  get operation_amount(): BigInt {
    let value = this.get("operation_amount");
    return value!.toBigInt();
  }

  set operation_amount(value: BigInt) {
    this.set("operation_amount", Value.fromBigInt(value));
  }

  get amount_delivered(): BigInt {
    let value = this.get("amount_delivered");
    return value!.toBigInt();
  }

  set amount_delivered(value: BigInt) {
    this.set("amount_delivered", Value.fromBigInt(value));
  }

  get fee_deducted(): BigInt {
    let value = this.get("fee_deducted");
    return value!.toBigInt();
  }

  set fee_deducted(value: BigInt) {
    this.set("fee_deducted", Value.fromBigInt(value));
  }

  get payment_method(): BigInt {
    let value = this.get("payment_method");
    return value!.toBigInt();
  }

  set payment_method(value: BigInt) {
    this.set("payment_method", Value.fromBigInt(value));
  }

  get fiat_method(): BigInt {
    let value = this.get("fiat_method");
    return value!.toBigInt();
  }

  set fiat_method(value: BigInt) {
    this.set("fiat_method", Value.fromBigInt(value));
  }

  get confirmation_owner_id(): i32 {
    let value = this.get("confirmation_owner_id");
    return value!.toI32();
  }

  set confirmation_owner_id(value: i32) {
    this.set("confirmation_owner_id", Value.fromI32(value));
  }

  get confirmation_signer_id(): i32 {
    let value = this.get("confirmation_signer_id");
    return value!.toI32();
  }

  set confirmation_signer_id(value: i32) {
    this.set("confirmation_signer_id", Value.fromI32(value));
  }

  get confirmation_current(): i32 {
    let value = this.get("confirmation_current");
    return value!.toI32();
  }

  set confirmation_current(value: i32) {
    this.set("confirmation_current", Value.fromI32(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get datetime(): string {
    let value = this.get("datetime");
    return value!.toString();
  }

  set datetime(value: string) {
    this.set("datetime", Value.fromString(value));
  }

  get terms_conditions(): string {
    let value = this.get("terms_conditions");
    return value!.toString();
  }

  set terms_conditions(value: string) {
    this.set("terms_conditions", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }
}

export class Orderhistorybuy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Orderhistorybuy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Orderhistorybuy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Orderhistorybuy", id.toString(), this);
    }
  }

  delete(): void {
    let id = this.get("id");
    assert(id != null, "Cannot delete Orderhistorybuy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Orderhistorybuy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.remove("Orderhistorybuy", id.toString());
    }
  }

  static load(id: string): Orderhistorybuy | null {
    return changetype<Orderhistorybuy | null>(store.get("Orderhistorybuy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offer_id(): BigInt {
    let value = this.get("offer_id");
    return value!.toBigInt();
  }

  set offer_id(value: BigInt) {
    this.set("offer_id", Value.fromBigInt(value));
  }

  get order_id(): BigInt {
    let value = this.get("order_id");
    return value!.toBigInt();
  }

  set order_id(value: BigInt) {
    this.set("order_id", Value.fromBigInt(value));
  }

  get owner_id(): string {
    let value = this.get("owner_id");
    return value!.toString();
  }

  set owner_id(value: string) {
    this.set("owner_id", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get signer_id(): string {
    let value = this.get("signer_id");
    return value!.toString();
  }

  set signer_id(value: string) {
    this.set("signer_id", Value.fromString(value));
  }

  get exchange_rate(): string {
    let value = this.get("exchange_rate");
    return value!.toString();
  }

  set exchange_rate(value: string) {
    this.set("exchange_rate", Value.fromString(value));
  }

  get operation_amount(): BigInt {
    let value = this.get("operation_amount");
    return value!.toBigInt();
  }

  set operation_amount(value: BigInt) {
    this.set("operation_amount", Value.fromBigInt(value));
  }

  get amount_delivered(): BigInt {
    let value = this.get("amount_delivered");
    return value!.toBigInt();
  }

  set amount_delivered(value: BigInt) {
    this.set("amount_delivered", Value.fromBigInt(value));
  }

  get fee_deducted(): BigInt {
    let value = this.get("fee_deducted");
    return value!.toBigInt();
  }

  set fee_deducted(value: BigInt) {
    this.set("fee_deducted", Value.fromBigInt(value));
  }

  get payment_method(): BigInt {
    let value = this.get("payment_method");
    return value!.toBigInt();
  }

  set payment_method(value: BigInt) {
    this.set("payment_method", Value.fromBigInt(value));
  }

  get fiat_method(): BigInt {
    let value = this.get("fiat_method");
    return value!.toBigInt();
  }

  set fiat_method(value: BigInt) {
    this.set("fiat_method", Value.fromBigInt(value));
  }

  get confirmation_owner_id(): i32 {
    let value = this.get("confirmation_owner_id");
    return value!.toI32();
  }

  set confirmation_owner_id(value: i32) {
    this.set("confirmation_owner_id", Value.fromI32(value));
  }

  get confirmation_signer_id(): i32 {
    let value = this.get("confirmation_signer_id");
    return value!.toI32();
  }

  set confirmation_signer_id(value: i32) {
    this.set("confirmation_signer_id", Value.fromI32(value));
  }

  get confirmation_current(): i32 {
    let value = this.get("confirmation_current");
    return value!.toI32();
  }

  set confirmation_current(value: i32) {
    this.set("confirmation_current", Value.fromI32(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get datetime(): string {
    let value = this.get("datetime");
    return value!.toString();
  }

  set datetime(value: string) {
    this.set("datetime", Value.fromString(value));
  }

  get terms_conditions(): string {
    let value = this.get("terms_conditions");
    return value!.toString();
  }

  set terms_conditions(value: string) {
    this.set("terms_conditions", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }
}

export class Orderhistorysell extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Orderhistorysell entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Orderhistorysell must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Orderhistorysell", id.toString(), this);
    }
  }

  delete(): void {
    let id = this.get("id");
    assert(id != null, "Cannot delete Orderhistorysell entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Orderhistorysell must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.remove("Orderhistorysell", id.toString());
    }
  }

  static load(id: string): Orderhistorysell | null {
    return changetype<Orderhistorysell | null>(
      store.get("Orderhistorysell", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offer_id(): BigInt {
    let value = this.get("offer_id");
    return value!.toBigInt();
  }

  set offer_id(value: BigInt) {
    this.set("offer_id", Value.fromBigInt(value));
  }

  get order_id(): BigInt {
    let value = this.get("order_id");
    return value!.toBigInt();
  }

  set order_id(value: BigInt) {
    this.set("order_id", Value.fromBigInt(value));
  }

  get owner_id(): string {
    let value = this.get("owner_id");
    return value!.toString();
  }

  set owner_id(value: string) {
    this.set("owner_id", Value.fromString(value));
  }

  get asset(): string {
    let value = this.get("asset");
    return value!.toString();
  }

  set asset(value: string) {
    this.set("asset", Value.fromString(value));
  }

  get signer_id(): string {
    let value = this.get("signer_id");
    return value!.toString();
  }

  set signer_id(value: string) {
    this.set("signer_id", Value.fromString(value));
  }

  get exchange_rate(): string {
    let value = this.get("exchange_rate");
    return value!.toString();
  }

  set exchange_rate(value: string) {
    this.set("exchange_rate", Value.fromString(value));
  }

  get operation_amount(): BigInt {
    let value = this.get("operation_amount");
    return value!.toBigInt();
  }

  set operation_amount(value: BigInt) {
    this.set("operation_amount", Value.fromBigInt(value));
  }

  get amount_delivered(): BigInt {
    let value = this.get("amount_delivered");
    return value!.toBigInt();
  }

  set amount_delivered(value: BigInt) {
    this.set("amount_delivered", Value.fromBigInt(value));
  }

  get fee_deducted(): BigInt {
    let value = this.get("fee_deducted");
    return value!.toBigInt();
  }

  set fee_deducted(value: BigInt) {
    this.set("fee_deducted", Value.fromBigInt(value));
  }

  get payment_method(): BigInt {
    let value = this.get("payment_method");
    return value!.toBigInt();
  }

  set payment_method(value: BigInt) {
    this.set("payment_method", Value.fromBigInt(value));
  }

  get fiat_method(): BigInt {
    let value = this.get("fiat_method");
    return value!.toBigInt();
  }

  set fiat_method(value: BigInt) {
    this.set("fiat_method", Value.fromBigInt(value));
  }

  get confirmation_owner_id(): i32 {
    let value = this.get("confirmation_owner_id");
    return value!.toI32();
  }

  set confirmation_owner_id(value: i32) {
    this.set("confirmation_owner_id", Value.fromI32(value));
  }

  get confirmation_signer_id(): i32 {
    let value = this.get("confirmation_signer_id");
    return value!.toI32();
  }

  set confirmation_signer_id(value: i32) {
    this.set("confirmation_signer_id", Value.fromI32(value));
  }

  get confirmation_current(): i32 {
    let value = this.get("confirmation_current");
    return value!.toI32();
  }

  set confirmation_current(value: i32) {
    this.set("confirmation_current", Value.fromI32(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    return value!.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get datetime(): string {
    let value = this.get("datetime");
    return value!.toString();
  }

  set datetime(value: string) {
    this.set("datetime", Value.fromString(value));
  }

  get terms_conditions(): string {
    let value = this.get("terms_conditions");
    return value!.toString();
  }

  set terms_conditions(value: string) {
    this.set("terms_conditions", Value.fromString(value));
  }

  get status(): i32 {
    let value = this.get("status");
    return value!.toI32();
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }
}
